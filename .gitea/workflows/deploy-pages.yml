name: Build and Deploy WASM
on:
  workflow_dispatch:
env:
  DEPLOY_PATH: /var/www/gtacompta
 
jobs:
  deploy:
    runs-on: linux
    container:
      image: git.odizinne.com/odizinne/wasm-ubuntu-22.04:latest
      options: --add-host=127.0.0.1:host-gateway
   
    steps:
      - name: Clone repository
        run: |
          git clone --depth=1 https://git.odizinne.com/${{ gitea.repository }}.git .

      - name: Build WebAssembly
        shell: bash
        run: |
          . ${EMSDK}/emsdk_env.sh
          mkdir build
          cd build
         
          export QT_NO_PRIVATE_MODULE_WARNING=ON
         
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_CHAINLOAD_TOOLCHAIN_FILE=${EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCMAKE_TOOLCHAIN_FILE="$QT_WASM_PATH/lib/cmake/Qt6/qt.toolchain.cmake" \
            -DCMAKE_PREFIX_PATH="$QT_WASM_PATH" \
            -DCMAKE_FIND_ROOT_PATH="$QT_WASM_PATH" \
            -DQT_HOST_PATH="$QT_HOST_PATH"
          cmake --build . --parallel
         
      - name: Copy index.html and favicon to build directory
        run: |
          cp index.html build/ || echo "No index.html found in root"
          cp resources/icons/icon.ico build/favicon.ico || echo "No icon.ico found in resources/icons/"
          echo "Files in build directory:"
          ls -la build/
     
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          apt-get update && apt-get install -y openssh-client rsync
          
          mkdir -p /root/.ssh
          chmod 700 /root/.ssh
          
          # Write key with printf to preserve formatting
          printf "%s\n" "$SSH_PRIVATE_KEY" > /root/.ssh/id_ed25519
          chmod 600 /root/.ssh/id_ed25519
          
          # Verify the key format
          echo "First and last lines of key:"
          head -n 1 /root/.ssh/id_ed25519
          tail -n 1 /root/.ssh/id_ed25519
          echo "Total lines in key file:"
          wc -l /root/.ssh/id_ed25519
          
          # Test key
          ssh-keygen -l -f /root/.ssh/id_ed25519
          
          # Try direct SSH test first
          ssh -p ${{ secrets.SSH_PORT }} \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i /root/.ssh/id_ed25519 \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "echo 'Direct SSH works!' && pwd"
          
          # If that works, do rsync
          rsync -avz --delete \
            -e "ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/id_ed25519" \
            build/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_PATH }}